// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class MemCacheNative {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MemCacheNative(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MemCacheNative.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int MemCache_put_string(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _MemCache_put_string(
      key,
      value,
    );
  }

  late final _MemCache_put_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MemCache_put_string');
  late final _MemCache_put_string = _MemCache_put_stringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int MemCache_put_int(
    ffi.Pointer<ffi.Char> key,
    int value,
  ) {
    return _MemCache_put_int(
      key,
      value,
    );
  }

  late final _MemCache_put_intPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'MemCache_put_int');
  late final _MemCache_put_int = _MemCache_put_intPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int)>();

  int MemCache_put_double(
    ffi.Pointer<ffi.Char> key,
    double value,
  ) {
    return _MemCache_put_double(
      key,
      value,
    );
  }

  late final _MemCache_put_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Double)>>('MemCache_put_double');
  late final _MemCache_put_double = _MemCache_put_doublePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, double)>();

  int MemCache_put_bool(
    ffi.Pointer<ffi.Char> key,
    bool value,
  ) {
    return _MemCache_put_bool(
      key,
      value,
    );
  }

  late final _MemCache_put_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Bool)>>('MemCache_put_bool');
  late final _MemCache_put_bool = _MemCache_put_boolPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, bool)>();

  int MemCache_put_bytes(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Uint8> bytes,
    int size,
  ) {
    return _MemCache_put_bytes(
      key,
      bytes,
      size,
    );
  }

  late final _MemCache_put_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>,
              ffi.Size)>>('MemCache_put_bytes');
  late final _MemCache_put_bytes = _MemCache_put_bytesPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>, int)>();

  int MemCache_put_strings(
    ffi.Pointer<ffi.Pointer<ffi.Char>> key,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
    int size,
  ) {
    return _MemCache_put_strings(
      key,
      value,
      size,
    );
  }

  late final _MemCache_put_stringsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Size)>>('MemCache_put_strings');
  late final _MemCache_put_strings = _MemCache_put_stringsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int MemCache_put_ints(
    ffi.Pointer<ffi.Pointer<ffi.Char>> key,
    ffi.Pointer<ffi.Int> value,
    int size,
  ) {
    return _MemCache_put_ints(
      key,
      value,
      size,
    );
  }

  late final _MemCache_put_intsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>, ffi.Size)>>('MemCache_put_ints');
  late final _MemCache_put_ints = _MemCache_put_intsPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Int>, int)>();

  int MemCache_put_doubles(
    ffi.Pointer<ffi.Pointer<ffi.Char>> key,
    ffi.Pointer<ffi.Double> value,
    int size,
  ) {
    return _MemCache_put_doubles(
      key,
      value,
      size,
    );
  }

  late final _MemCache_put_doublesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Double>, ffi.Size)>>('MemCache_put_doubles');
  late final _MemCache_put_doubles = _MemCache_put_doublesPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Double>, int)>();

  int MemCache_put_bools(
    ffi.Pointer<ffi.Pointer<ffi.Char>> key,
    ffi.Pointer<ffi.Bool> value,
    int size,
  ) {
    return _MemCache_put_bools(
      key,
      value,
      size,
    );
  }

  late final _MemCache_put_boolsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Bool>, ffi.Size)>>('MemCache_put_bools');
  late final _MemCache_put_bools = _MemCache_put_boolsPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Bool>, int)>();

  int MemCache_delete_value(
    ffi.Pointer<ffi.Char> key,
  ) {
    return _MemCache_delete_value(
      key,
    );
  }

  late final _MemCache_delete_valuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'MemCache_delete_value');
  late final _MemCache_delete_value = _MemCache_delete_valuePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  bool MemCache_get_string(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
  ) {
    return _MemCache_get_string(
      key,
      value,
    );
  }

  late final _MemCache_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('MemCache_get_string');
  late final _MemCache_get_string = _MemCache_get_stringPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  bool MemCache_get_int(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Int> value,
  ) {
    return _MemCache_get_int(
      key,
      value,
    );
  }

  late final _MemCache_get_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('MemCache_get_int');
  late final _MemCache_get_int = _MemCache_get_intPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  bool MemCache_get_double(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Double> value,
  ) {
    return _MemCache_get_double(
      key,
      value,
    );
  }

  late final _MemCache_get_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>)>>('MemCache_get_double');
  late final _MemCache_get_double = _MemCache_get_doublePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Double>)>();

  bool MemCache_get_bool(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Bool> value,
  ) {
    return _MemCache_get_bool(
      key,
      value,
    );
  }

  late final _MemCache_get_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Bool>)>>('MemCache_get_bool');
  late final _MemCache_get_bool = _MemCache_get_boolPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>)>();

  bool MemCache_get_bytes(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Size> size,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> result,
  ) {
    return _MemCache_get_bytes(
      key,
      size,
      result,
    );
  }

  late final _MemCache_get_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>>('MemCache_get_bytes');
  late final _MemCache_get_bytes = _MemCache_get_bytesPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>)>();

  int MemCache_delete_json(
    ffi.Pointer<ffi.Char> key,
  ) {
    return _MemCache_delete_json(
      key,
    );
  }

  late final _MemCache_delete_jsonPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'MemCache_delete_json');
  late final _MemCache_delete_json = _MemCache_delete_jsonPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  int MemCache_put_json(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> json,
  ) {
    return _MemCache_put_json(
      key,
      json,
    );
  }

  late final _MemCache_put_jsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MemCache_put_json');
  late final _MemCache_put_json = _MemCache_put_jsonPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  bool MemCache_get_json(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
  ) {
    return _MemCache_get_json(
      key,
      value,
    );
  }

  late final _MemCache_get_jsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('MemCache_get_json');
  late final _MemCache_get_json = _MemCache_get_jsonPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  bool MemCache_query_json(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> json_path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
  ) {
    return _MemCache_query_json(
      key,
      json_path,
      value,
    );
  }

  late final _MemCache_query_jsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('MemCache_query_json');
  late final _MemCache_query_json = _MemCache_query_jsonPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int MemCache_modify_json(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> json_path,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _MemCache_modify_json(
      key,
      json_path,
      value,
    );
  }

  late final _MemCache_modify_jsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MemCache_modify_json');
  late final _MemCache_modify_json = _MemCache_modify_jsonPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int MemCache_patch_json(
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> patch,
  ) {
    return _MemCache_patch_json(
      key,
      patch,
    );
  }

  late final _MemCache_patch_jsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MemCache_patch_json');
  late final _MemCache_patch_json = _MemCache_patch_jsonPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();
}

class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;
